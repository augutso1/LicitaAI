
**Persona:** Você é um desenvolvedor Python sênior, especialista em criar interfaces web elegantes e funcionais com a biblioteca Streamlit. Sua especialidade é criar UIs minimalistas e focadas na experiência do usuário.




**Contexto:** Estou construindo o frontend para uma aplicação de IA que automatiza processos de licitação. O usuário irá inserir a especificação de um produto em um campo de texto. Após o envio, a interface deve exibir, em tempo real, o que o agente de IA está fazendo nos bastidores (pesquisando, analisando, gerando relatórios, etc.). O objetivo é criar uma experiência semelhante a interagir com um chat de LLM, como o ChatGPT, mas focado nesta tarefa específica.




**Tarefa Principal:**
Gere o código completo para uma aplicação de página única em Streamlit (`app.py`). A aplicação deve ter as seguintes características:




**1. Estilo e Aparência:**
* **Tema:** Um tema escuro (dark theme) com tons de cinza, profissional e minimalista.
* **Cor de Fundo Principal:** Um cinza escuro, como `#262730`.
* **Cor do Texto:** Um cinza claro ou branco, como `#FAFAFA`.
* **Fonte:** Padrão do sistema ou 'sans serif'.
* **Layout:** Centralizado e com preenchimento (padding) adequado.




**2. Componentes da Interface:**
* **Título:** Um título simples no topo da página: "Licita-IA | Agente de Cotações".
* **Área de Chat:** O corpo principal da página exibirá a conversa.
* **Input do Usuário:** Utilize o `st.chat_input` no rodapé da página para uma experiência de chat autêntica. O placeholder do input deve ser "Descreva o produto que você precisa cotar...".




**3. Comportamento e Funcionalidade:**
* Quando a aplicação inicia, ela deve exibir uma mensagem de boas-vindas do assistente, como "Olá! Estou pronto para ajudar a encontrar os melhores produtos para sua licitação. Por favor, descreva o que você precisa."
* Quando o usuário digita uma mensagem e pressiona Enter, a mensagem do usuário deve ser exibida na área de chat com a identificação de "user".
* Imediatamente após a mensagem do usuário, o assistente deve responder. A resposta do assistente deve ser **exibida em stream**, simulando que ele está "pensando" e "trabalhando" em tempo real.
* Para simular este comportamento de stream, crie uma função de mock (simulação) que retorna uma lista de frases de status. A aplicação deve iterar sobre essa lista e exibir cada frase com um pequeno atraso (`time.sleep`).




**Exemplo de fluxo de trabalho do stream do agente (mock):**
1.  O assistente primeiro responde: "Entendido. Iniciando o processo de cotação para o seu produto. Acompanhe meu progresso abaixo:"
2.  Em seguida, uma nova área ou a mesma mensagem é atualizada com os seguintes status, um após o outro:
    * `[PASSO 1/5] 🕵️‍♂️ Ativando Agente de Pesquisa...`
    * `[PASSO 2/5] 🌐 Rastreando a web em busca de produtos e fornecedores...`
    * `[PASSO 3/5] 🔬 Analisando 3 produtos compatíveis. Verificando especificações e CNPJ dos vendedores...`
    * `[PASSO 4/5] 📸 Capturando screenshots das páginas de produto para evidência...`
    * `[PASSO 5/5] 📊 Gerando o relatório final em Excel...`
    * `[CONCLUÍDO] ✅ Processo finalizado! Seu relatório está pronto.`




**Restrições e Boas Práticas:**
* O código deve estar contido em um único arquivo `app.py`.
* O código deve ser limpo, bem comentado e seguir as boas práticas do Python (PEP 8).
* **Crucial:** A lógica do agente de IA deve ser **simulada (mocked)**. Não implemente as chamadas de API ou o backend real. O foco deste prompt é exclusivamente na criação da interface e na simulação da experiência do usuário.
* Utilize a funcionalidade de `st.session_state` para armazenar o histórico da conversa.
* Use os componentes `st.chat_message` para exibir as mensagens do usuário e do assistente de forma clara.




Gere o código completo e executável para esta aplicação Streamlit.